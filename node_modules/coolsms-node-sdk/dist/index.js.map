{"mappings":"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","sources":["src/index.ts","src/requests/messageRequest.ts","src/env_config.json","src/lib/stringDateTrasnfer.ts","src/errors/DefaultError.ts","src/lib/defaultFetcher.ts","src/lib/authenticator.ts","src/lib/queryParameterGenerator.ts"],"sourcesContent":["import Message from './models/message';\nimport {\n    CreateGroupRequest,\n    defaultAgent,\n    FileType,\n    FileUploadRequest,\n    GetGroupMessagesRequest,\n    GetGroupsRequest,\n    GetMessagesRequest,\n    GetMessagesRequestType,\n    GetStatisticsRequest,\n    GetStatisticsRequestType,\n    GroupMessageAddRequest,\n    MultipleMessageSendingRequest,\n    RemoveMessageIdsToGroupRequest,\n    RequestConfig,\n    ScheduledDateSendingRequest,\n    SingleMessageSendingRequest\n} from './requests/messageRequest';\nimport defaultFetcher from './lib/defaultFetcher';\nimport {\n    AddMessageResponse,\n    FileUploadResponse,\n    GetBalanceResponse,\n    GetGroupsResponse,\n    GetMessagesResponse,\n    GetStatisticsResponse,\n    GroupMessageResponse,\n    RemoveGroupMessagesResponse,\n    SingleMessageSentResponse\n} from './responses/messageResponses';\nimport {GroupId} from './types/commonTypes';\nimport queryParameterGenerator from './lib/queryParameterGenerator';\nimport {formatISO} from 'date-fns';\nimport ImageToBase64 from 'image-to-base64';\nimport stringDateTransfer from './lib/stringDateTrasnfer';\n\ntype AuthInfo = {\n    apiKey: string,\n    apiSecret: string\n}\n\nexport default class CoolsmsMessageService {\n    private readonly baseUrl = 'https://api.coolsms.co.kr';\n    private readonly apiKey: string;\n    private readonly apiSecret: string;\n    private readonly authInfo: AuthInfo;\n\n    constructor(apiKey: string, apiSecret: string) {\n        this.apiKey = apiKey;\n        this.apiSecret = apiSecret;\n        this.authInfo = {\n            apiKey,\n            apiSecret\n        };\n    }\n\n    /**\n     * 단일 메시지 발송 기능\n     * @param message 메시지(문자, 알림톡 등)\n     * @param appId appstore용 app id\n     */\n    async sendOne(message: Message, appId?: string): Promise<SingleMessageSentResponse> {\n        const parameter = new SingleMessageSendingRequest(message, false, appId);\n        const requestConfig: RequestConfig = {\n            method: 'POST',\n            url: `${this.baseUrl}/messages/v4/send`\n        };\n        return defaultFetcher<SingleMessageSendingRequest, SingleMessageSentResponse>(this.authInfo, requestConfig, parameter);\n    }\n\n    /**\n     * 단일 메시지 예약 발송 기능\n     * @param message 메시지(문자, 알림톡 등)\n     * @param scheduledDate\n     */\n    async sendOneFuture(message: Message, scheduledDate: string | Date): Promise<GroupMessageResponse> {\n        const groupId = await this.createGroup();\n        await this.addMessagesToGroup(groupId, [message]);\n        scheduledDate = stringDateTransfer(scheduledDate);\n        return this.reserveGroup(groupId, scheduledDate);\n    }\n\n    /**\n     * 여러 메시지 즉시 발송 기능\n     * 한번 요청으로 최대 10,000건의 메시지를 추가할 수 있습니다.\n     * @param messages 여러 메시지(문자, 알림톡 등)\n     * @param allowDuplicates 중복 수신번호 허용\n     * @param appId appstore용 app id\n     */\n    async sendMany(messages: Array<Message>, allowDuplicates = false, appId?: string): Promise<GroupMessageResponse> {\n        const parameter = new MultipleMessageSendingRequest(messages, allowDuplicates, appId);\n        const requestConfig: RequestConfig = {\n            method: 'POST',\n            url: `${this.baseUrl}/messages/v4/send-many`\n        };\n        return defaultFetcher<MultipleMessageSendingRequest, GroupMessageResponse>(this.authInfo, requestConfig, parameter);\n    }\n\n    /**\n     * 여러 메시지 예약 발송 기능\n     * 한번 요청으로 최대 10,000건의 메시지를 추가할 수 있습니다.\n     * @param messages 여러 메시지(문자, 알림톡 등)\n     * @param scheduledDate 예약 발송 일자\n     * @param allowDuplicates 중복 수신번호 허용\n     * @param appId appstore용 app id\n     */\n    async sendManyFuture(messages: Array<Message>, scheduledDate: string | Date, allowDuplicates = false, appId?: string): Promise<GroupMessageResponse> {\n        const groupId = await this.createGroup(allowDuplicates, appId);\n        await this.addMessagesToGroup(groupId, messages);\n        scheduledDate = stringDateTransfer(scheduledDate);\n        return this.reserveGroup(groupId, scheduledDate);\n    }\n\n    /**\n     * 그룹 생성\n     */\n    async createGroup(allowDuplicates?: boolean, appId?: string): Promise<GroupId> {\n        allowDuplicates = allowDuplicates ?? false;\n        const {sdkVersion, osPlatform} = defaultAgent;\n        const requestConfig: RequestConfig = {\n            method: 'POST',\n            url: `${this.baseUrl}/messages/v4/groups`\n        };\n        return defaultFetcher<CreateGroupRequest, GroupMessageResponse>(this.authInfo, requestConfig, {\n            sdkVersion,\n            osPlatform,\n            allowDuplicates,\n            appId\n        }).then(res => res.groupId);\n    }\n\n    /**\n     * 그룹 메시지 추가\n     * 한번 요청으로 최대 10,000건의 메시지를 추가할 수 있습니다.\n     * @param groupId 생성 된 Group ID\n     * @param messages 여러 메시지(문자, 알림톡 등)\n     */\n    async addMessagesToGroup(groupId: GroupId, messages: Required<Array<Message>>): Promise<AddMessageResponse> {\n        const requestConfig: RequestConfig = {\n            method: 'PUT',\n            url: `${this.baseUrl}/messages/v4/groups/${groupId}/messages`\n        };\n        return defaultFetcher<GroupMessageAddRequest, AddMessageResponse>(this.authInfo, requestConfig, new GroupMessageAddRequest(messages));\n    }\n\n    /**\n     * 그룹 메시지 전송 요청\n     * @param groupId 생성 된 Group ID\n     */\n    async sendGroup(groupId: GroupId): Promise<GroupMessageResponse> {\n        const requestConfig: RequestConfig = {\n            method: 'POST',\n            url: `${this.baseUrl}/messages/v4/groups/${groupId}/send`\n        };\n        return defaultFetcher<undefined, GroupMessageResponse>(this.authInfo, requestConfig);\n    }\n\n    /**\n     * 그룹 예약 발송 설정\n     * @param groupId 생성 된 Group ID\n     * @param scheduledDate 예약발송 할 날짜\n     */\n    async reserveGroup(groupId: GroupId, scheduledDate: Date) {\n        const requestConfig: RequestConfig = {\n            method: 'POST',\n            url: `${this.baseUrl}/messages/v4/groups/${groupId}/schedule`\n        };\n        const formattedScheduledDate = formatISO(scheduledDate);\n        return defaultFetcher<ScheduledDateSendingRequest, GroupMessageResponse>(this.authInfo, requestConfig, {\n            scheduledDate: formattedScheduledDate\n        });\n    }\n\n    /**\n     * 그룹 통계 정보 조회\n     * @param data 그룹 정보 상세 조회용 request 데이터, date 관련 파라미터는 iso8601 포맷으로 보내야 함\n     */\n    async getGroups(data?: GetGroupsRequest) {\n        const endpoint = queryParameterGenerator(`${this.baseUrl}/messages/v4/groups`, data);\n        const requestConfig: RequestConfig = {\n            method: 'GET',\n            url: endpoint\n        };\n        return defaultFetcher<undefined, GetGroupsResponse>(this.authInfo, requestConfig);\n    }\n\n    /**\n     * 그룹 내 메시지 목록 조회\n     * @param groupId 생성 된 Group ID\n     * @param data startkey, limit 등 쿼리 조건 파라미터\n     */\n    async getGroupMessages(groupId: GroupId, data?: GetGroupMessagesRequest): Promise<GetMessagesResponse> {\n        const endpoint = queryParameterGenerator(`${this.baseUrl}/messages/v4/groups/${groupId}/messages`, data);\n        const requestConfig: RequestConfig = {\n            method: 'GET',\n            url: endpoint\n        };\n        return defaultFetcher<undefined, GetMessagesResponse>(this.authInfo, requestConfig);\n    }\n\n    /**\n     * 그룹 내 특정 메시지 삭제\n     * @param groupId 생성 된 Group Id\n     * @param messageIds 생성 된 메시지 ID 목록\n     */\n    async removeGroupMessages(groupId: GroupId, messageIds: Required<Array<string>>): Promise<RemoveGroupMessagesResponse> {\n        const requestConfig: RequestConfig = {\n            method: 'DELETE',\n            url: `${this.baseUrl}/messages/v4/groups/${groupId}/messages`\n        };\n        return defaultFetcher<RemoveMessageIdsToGroupRequest, RemoveGroupMessagesResponse>(this.authInfo, requestConfig, {messageIds});\n    }\n\n    /**\n     * 그룹 내 예약 발송 취소(메시지 실패 전체 처리 됨)\n     * @param groupId 생성 된 Group ID\n     */\n    async removeReservationToGroup(groupId: GroupId): Promise<GroupMessageResponse> {\n        const requestConfig: RequestConfig = {\n            method: 'DELETE',\n            url: `${this.baseUrl}/messages/v4/groups/${groupId}/schedule`\n        };\n        return defaultFetcher<undefined, GroupMessageResponse>(this.authInfo, requestConfig);\n    }\n\n    /**\n     * 그룹 삭제\n     * @param groupId\n     */\n    async removeGroup(groupId: GroupId) {\n        const requestConfig: RequestConfig = {\n            method: 'DELETE',\n            url: `${this.baseUrl}/messages/v4/groups/${groupId}`\n        };\n        return defaultFetcher<undefined, GroupMessageResponse>(this.authInfo, requestConfig);\n    }\n\n    /**\n     * 메시지 목록 조회\n     * @param data 목록 조회 상세조건 파라미터\n     */\n    async getMessages(data?: Readonly<GetMessagesRequestType>): Promise<GetMessagesResponse> {\n        const parameter: GetMessagesRequest | object = data ? new GetMessagesRequest(data) : {};\n        const endpoint = queryParameterGenerator(`${this.baseUrl}/messages/v4/list`, parameter);\n        const requestConfig: RequestConfig = {\n            method: 'GET',\n            url: endpoint\n        };\n        return defaultFetcher<undefined, GetMessagesResponse>(this.authInfo, requestConfig);\n    }\n\n    /**\n     * 통계 조회\n     * @param data 통계 상세 조건 파라미터\n     * @returns GetStatisticsResponse 통계 결과\n     */\n    async getStatistics(data?: Readonly<GetStatisticsRequestType>): Promise<GetStatisticsResponse> {\n        const parameter: GetStatisticsRequest | object = data ? new GetStatisticsRequest(data) : {};\n        const endpoint = queryParameterGenerator(`${this.baseUrl}/messages/v4/statistics`, parameter);\n        const requestConfig: RequestConfig = {\n            method: 'GET',\n            url: endpoint\n        };\n        return defaultFetcher<undefined, GetStatisticsResponse>(this.authInfo, requestConfig);\n    }\n\n    /**\n     * 잔액조회\n     * @returns GetBalanceResponse\n     */\n    async getBalance(): Promise<GetBalanceResponse> {\n        const requestConfig: RequestConfig = {\n            method: 'GET',\n            url: `${this.baseUrl}/cash/v1/balance`\n        };\n        return defaultFetcher<undefined, GetBalanceResponse>(this.authInfo, requestConfig);\n    }\n\n    /**\n     * 파일(이미지) 업로드\n     * 카카오 친구톡 이미지는 500kb, MMS는 200kb, 발신번호 서류 인증용 파일은 2mb의 제한이 있음\n     * @param filePath 해당 파일의 경로 또는 접근 가능한 이미지 URL\n     * @param fileType 저장할 파일의 유형, 예) 카카오 친구톡 용 이미지 -> KAKAO, MMS용 사진 -> MMS, 발신번호 서류 인증에 쓰이는 문서 등 -> DOCUMENT, RCS 이미지 -> RCS\n     * @param name 파일 이름\n     * @param link 파일 링크, 친구톡의 경우 필수 값\n     */\n    async uploadFile(filePath: string, fileType: FileType, name?: string, link?: string): Promise<FileUploadResponse> {\n        const encodedFile = await ImageToBase64(filePath);\n        const requestConfig: RequestConfig = {\n            method: 'POST',\n            url: `${this.baseUrl}/storage/v1/files`\n        };\n        const parameter: FileUploadRequest = {\n            file: encodedFile,\n            type: fileType,\n            name,\n            link\n        };\n        return defaultFetcher<FileUploadRequest, FileUploadResponse>(this.authInfo, requestConfig, parameter);\n    }\n}\n","import Message, {MessageType} from '../models/message';\nimport * as Config from '../env_config.json';\nimport {GroupId} from '../types/commonTypes';\nimport {formatISO} from 'date-fns';\nimport stringDateTransfer from '../lib/stringDateTrasnfer';\n\nexport type DefaultAgentType = {\n    sdkVersion: string\n    osPlatform: string\n};\n\nexport const defaultAgent: DefaultAgentType = {\n    sdkVersion: Config.version,\n    osPlatform: `${process.platform} | ${process.version}`,\n};\n\nabstract class DefaultMessageRequest {\n    allowDuplicates: boolean;\n    appId: string | undefined;\n    protected agent: DefaultAgentType;\n\n    protected constructor() {\n        this.agent = defaultAgent;\n        this.allowDuplicates = false;\n    }\n}\n\nexport class SingleMessageSendingRequest extends DefaultMessageRequest {\n    message: Message;\n\n    constructor(message: Message, allowDuplicates?: boolean, appId?: string) {\n        super();\n        this.message = message;\n        if (typeof allowDuplicates === 'boolean') {\n            this.allowDuplicates = allowDuplicates;\n        }\n        if (appId) {\n            this.appId = appId;\n        }\n    }\n}\n\nexport class MultipleMessageSendingRequest extends DefaultMessageRequest {\n    messages: Array<Message>;\n\n    constructor(messages: Array<Message>, allowDuplicates?: boolean, appId?: string) {\n        super();\n        this.messages = messages;\n        if (typeof allowDuplicates === 'boolean') {\n            this.allowDuplicates = allowDuplicates;\n        }\n        if (appId) {\n            this.appId = appId;\n        }\n    }\n}\n\nexport class GroupMessageAddRequest {\n    messages: Array<Message>;\n\n    constructor(messages: Array<Message>) {\n        this.messages = messages;\n    }\n}\n\nexport type ScheduledDateSendingRequest = {\n    scheduledDate: string\n}\n\nexport type RemoveMessageIdsToGroupRequest = {\n    messageIds: Array<string>\n}\n\nexport type GetGroupMessagesRequest = {\n    startKey?: string,\n    limit?: number\n}\n\nexport type GetGroupsRequest = {\n    startKey?: string,\n    limit?: number,\n    startDate?: string,\n    endDate?: string\n}\n\nexport type RequestConfig = {\n    method: string,\n    url: string\n}\n\ntype DateType = 'CREATED' | 'UPDATED'\n\nexport type GetMessagesRequestType = {\n    startKey?: string\n    limit?: number\n    messageId?: string\n    messageIds?: Array<string>\n    groupId?: GroupId\n    to?: string\n    from?: string\n    type?: MessageType\n    statusCode?: string\n    duration?: {\n        dateType?: DateType\n        startDate: string\n        endDate: string\n    }\n}\n\nexport class GetMessagesRequest {\n    readonly startKey?: string;\n    readonly limit?: number;\n    readonly dateType?: DateType = 'CREATED';\n    readonly messageId?: string;\n    readonly messageIds?: Array<string>;\n    readonly groupId?: GroupId;\n    readonly to?: string;\n    readonly from?: string;\n    readonly type?: MessageType;\n    readonly statusCode?: string;\n    readonly startDate?: string;\n    readonly endDate?: string;\n\n    constructor(getMessageRequestType: GetMessagesRequestType) {\n        this.startKey = getMessageRequestType.startKey;\n        this.limit = getMessageRequestType.limit;\n        if (getMessageRequestType.duration?.dateType) this.dateType = getMessageRequestType.duration.dateType;\n        if (getMessageRequestType.duration) this.startDate = formatISO(stringDateTransfer(getMessageRequestType.duration.startDate));\n        if (getMessageRequestType.duration) this.endDate = formatISO(stringDateTransfer(getMessageRequestType.duration.endDate));\n        this.messageId = getMessageRequestType.messageId;\n        this.messageIds = getMessageRequestType.messageIds;\n        this.groupId = getMessageRequestType.groupId;\n        this.to = getMessageRequestType.to;\n        this.from = getMessageRequestType.from;\n        this.type = getMessageRequestType.type;\n        this.statusCode = getMessageRequestType.statusCode;\n    }\n}\n\nexport type GetStatisticsRequestType = {\n    duration?: {\n        startDate: string | Date\n        endDate: string | Date\n    }\n    masterAccountId: string\n}\n\nexport class GetStatisticsRequest {\n    readonly startDate: string;\n    readonly endDate: string;\n    readonly masterAccountId: string;\n\n    constructor(getStatisticsRequest: GetStatisticsRequestType) {\n        if (getStatisticsRequest.duration) this.startDate = formatISO(stringDateTransfer(getStatisticsRequest.duration.startDate));\n        if (getStatisticsRequest.duration) this.endDate = formatISO(stringDateTransfer(getStatisticsRequest.duration.endDate));\n        this.masterAccountId = getStatisticsRequest.masterAccountId;\n    }\n}\n\nexport type FileType = 'KAKAO' | 'MMS' | 'DOCUMENT' | 'RCS'\n\nexport type FileUploadRequest = {\n    file: string\n    type: FileType\n    name?: string\n    link?: string\n}\n\nexport type CreateGroupRequest = DefaultAgentType & {\n    allowDuplicates: boolean\n    appId?: string\n}\n","{\n  \"version\": \"nodejs/2.0.0\"\n}\n","import {parseISO} from 'date-fns';\nimport {InvalidDateError} from '../errors/DefaultError';\n\n/**\n * 일반 문자열 날짜가 있을 경우 Date 타입으로 변환해주는 함수\n * @param value 일반 문자열 날짜 또는 Date 타입의 날짜\n */\nexport default function stringDateTransfer(value: string | Date): Date {\n    if (typeof value === 'string') {\n        value = parseISO(value);\n        const invalidDateText = 'Invalid Date';\n        if (value.toString() === invalidDateText) {\n            throw new InvalidDateError(invalidDateText);\n        }\n    }\n    return value;\n}\n","export type ErrorResponse = {\n    errorCode: string,\n    errorMessage: string\n}\n\nexport class InvalidDateError extends Error {\n    constructor(message: string) {\n        super(message);\n        this.name = 'InvalidDateError';\n    }\n}\n\nexport class ApiKeyError extends Error {\n    constructor(message: string) {\n        super(message);\n        this.name = 'InvalidApiKeyError';\n    }\n}\n\nexport class DefaultError extends Error {\n    constructor(errorCode: string, errorMessage: string) {\n        super(errorMessage);\n        this.name = errorCode;\n    }\n}\n","import getAuthInfo, {AuthenticationParameter} from './authenticator';\nimport fetch from 'cross-fetch';\nimport {DefaultError, ErrorResponse} from '../errors/DefaultError';\n\ntype DefaultRequest = {\n    url: string,\n    method: string\n}\n\n/**\n * 공용 API 클라이언트 함수\n * @throws DefaultError 발송 실패 등 API 상의 다양한 오류를 표시합니다.\n * @param authParameter API 인증을 위한 파라미터\n * @param request API URI, HTTP method 정의\n * @param data API에 요청할 request body 데이터\n */\nexport default async function defaultFetcher<T, R>(authParameter: AuthenticationParameter, request: DefaultRequest, data?: T): Promise<R> {\n    const authorizationHeaderData = getAuthInfo(authParameter);\n    return await fetch(request.url, {\n        headers: {\n            'Authorization': authorizationHeaderData,\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n        method: request.method\n    }).then<R>(async (res) => {\n        if (res.status >= 400 && res.status < 500) {\n            const errorResponse: ErrorResponse = await res.json();\n            throw new DefaultError(errorResponse.errorCode, errorResponse.errorMessage);\n        } else if (res.status >= 500) {\n            const responseText = await res.text();\n            throw new DefaultError('UnknownException', responseText);\n        }\n        try {\n            return res.json();\n        } catch (exception) {\n            throw new Error(await res.text());\n        }\n    });\n}\n","import {customAlphabet} from 'nanoid';\nimport {formatISO} from 'date-fns';\nimport {HmacSHA256} from 'crypto-js';\nimport {ApiKeyError} from '../errors/DefaultError';\n\nenum AuthenticateType {\n    API_KEY\n}\n\nexport type AuthenticationParameter = {\n    apiKey?: string\n    apiSecret?: string\n}\n\n\n/**\n * Get Authenticate Information for CoolSMS Requests\n * @param authenticationParameter\n * @param authType\n * @return string \"Authorization value\n */\nexport default function getAuthInfo(authenticationParameter: AuthenticationParameter, authType: AuthenticateType = AuthenticateType.API_KEY): string {\n    const {apiKey, apiSecret} = authenticationParameter;\n    switch (authType) {\n        case AuthenticateType.API_KEY:\n        default:\n            const salt = customAlphabet('1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ', 32)();\n            const date = formatISO(new Date());\n            const hmacData = date + salt;\n            if ((!apiKey || !apiSecret) || (apiKey === '' || apiSecret === '')) {\n                throw new ApiKeyError('Invalid API Key Error');\n            }\n            const signature = HmacSHA256(hmacData, apiSecret).toString();\n            return `HMAC-SHA256 apiKey=${apiKey}, date=${date}, salt=${salt}, signature=${signature}`;\n    }\n}\n","import {URL, URLSearchParams} from 'url';\n\nexport default function queryParameterGenerator<T extends object>(url: string, data?: T): string {\n    const apiUrl = new URL(url);\n    if (data) {\n        const urlSearchParams = new URLSearchParams();\n        Object.keys(data).forEach(key => {\n            const reflectedValue = Reflect.get(data, key);\n            if (reflectedValue) {\n                urlSearchParams.append(key, reflectedValue);\n            }\n        });\n        apiUrl.search = urlSearchParams.toString();\n    }\n    return apiUrl.toString();\n}\n"],"names":[],"version":3,"file":"index.js.map","sourceRoot":"../"}